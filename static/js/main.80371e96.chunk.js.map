{"version":3,"sources":["Components/SelectRate.jsx","Components/SelectMileRange.jsx","Components/SelectHours.jsx","Components/Form.jsx","Components/LoadPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["options","value","label","SelectRateWrapper","styled","div","SelectRate","props","onChange","e","rateSetter","rateInState","SelectMileRangeWrapper","SelectMileRange","useState","localMileRange","setLocalMileRange","Slider","valueLabelDisplay","data","mileSetter","updateMileRangeInState","name","SelectHoursWrapper","SelectHours","minChargingTime","setMinChargingTime","sendHourValuesToProps","hourSetter","updateHoursInState","type","min","max","target","FormWrapper","Form","rate","setRate","setRateInState","mileRange","setMileRange","mileRangeInState","setMileRangeInState","hours","setHourRange","hoursInState","setHoursInState","onSubmit","updateFormData","updateFormSubmittedInState","style","color","fontSize","Button","variant","disabled","LoadPageWrapper","RateWrapper","LoadPage","rateA","userRateA","toFixed","annualRateA","rateB","touRate","annualRateB","calcOptimalRate","AppWrapper","App","formData","setFormData","formSubmitted","setFormSubmitted","title","showMenuIconButton","startTime","parseInt","split","endTime","nonSurgeTotal","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80371e96.chunk.js","sourcesContent":["import Select from 'react-select'\nimport styled from 'styled-components'\n\nconst options = [\n    {value: '$0.15', label: 'Rate A ($0.15/kWh)'},\n    {value: 'TOU', label: 'Rate B (TOU Rate)'}\n]\n\nconst SelectRateWrapper = styled.div`\n    padding-bottom: 5%\n`\n\nexport default function SelectRate(props){\n\n    const clickHandler = (e) => {\n        props.rateSetter(e.value)\n        props.rateInState()\n    }\n\n    return (\n        <SelectRateWrapper>\n            <Select options={options} onChange={clickHandler}/>\n        </SelectRateWrapper>\n    )\n}","import Slider from '@material-ui/core/Slider';\nimport styled from 'styled-components'\nimport {useState} from 'react'\n\nconst SelectMileRangeWrapper = styled.div`\n    padding-bottom: 3%\n`\n\nexport default function SelectMileRange(props){\n\n    const changeHandler = (e, data) => {\n        props.mileSetter(data)\n        setLocalMileRange(data)\n        props.updateMileRangeInState()\n    }\n\n    const [localMileRange, setLocalMileRange] = useState(0)\n\n    return (\n        <SelectMileRangeWrapper>\n            <Slider \n                valueLabelDisplay=\"auto\"\n                onChange={changeHandler}\n                name=\"mileRange\"\n                value={localMileRange}\n                />\n        </SelectMileRangeWrapper> \n    )\n}","import {useState} from 'react'\nimport styled from 'styled-components'\n\nconst SelectHoursWrapper = styled.div`\n    padding-bottom: 3%;\n`\n\nexport default function SelectHours(props){\n\n    const [minChargingTime, setMinChargingTime] = useState(null)\n    // const [maxChargingTime, setMaxChargingTime] = useState(null)\n\n    const updateMinChargingTime = (e) => {\n        setMinChargingTime(e.target.value)\n    }\n\n    const updateMaxChargingTime = (e) => {\n        sendHourValuesToProps([minChargingTime, e.target.value])\n    }\n\n    const sendHourValuesToProps = (data) => {\n        props.hourSetter(data)\n        props.updateHoursInState()\n    }\n\n    return (\n        <SelectHoursWrapper>\n            <input type=\"time\" name=\"hours\" min=\"0:00\" max=\"23:00\" onChange={updateMinChargingTime}></input> to <input type=\"time\" name=\"hours\" min=\"1:00\" max=\"24:00\" onChange={updateMaxChargingTime}></input>\n        </SelectHoursWrapper>\n    )\n}","import {useState} from 'react'\nimport SelectRate from \"./SelectRate\"\nimport SelectMileRange from \"./SelectMileRange\"\nimport SelectHours from \"./SelectHours\"\nimport Button from '@material-ui/core/Button';\nimport styled from 'styled-components'\n\nconst FormWrapper = styled.div`\n    padding-top: 3%;\n    margin: auto;\n    align-items: center;\n    width: 38vw;\n`\n\nexport default function Form(props){\n\n    const [rate, setRate] = useState(null)\n    const [rateInState, setRateInState] = useState(false) /* helper boolean - if rate is not in state or is null, display span */\n\n    const [mileRange, setMileRange] = useState(0)\n    const [mileRangeInState, setMileRangeInState] = useState(false)\n\n    const [hours, setHourRange] = useState([])\n    const [hoursInState, setHoursInState] = useState(false)\n\n    const rateSetter = (data) => {\n        setRate(data)\n    }\n\n    const updateRateInState = () => {\n        setRateInState(true)\n    }\n\n    const mileSetter = (data) => {\n        setMileRange(data)\n    }\n\n    const updateMileRangeInState = () => {\n        setMileRangeInState(true)\n    }\n\n    const hourSetter = (data) => {\n        setHourRange(data)\n    }\n\n    const updateHoursInState = () => {\n        setHoursInState(true)\n    }\n\n/* this is a fn to grab the data from form and send back up to App */\n    const dataToApp = (e) => {\n        props.updateFormData(rate, mileRange, hours)\n        props.updateFormSubmittedInState()\n    }\n\n    const disableButton = () => {\n        if (rateInState && mileRangeInState && hoursInState) return false\n        return true\n    }\n\n    return (\n        <>\n        <FormWrapper>\n            <form onSubmit={dataToApp}>\n                <label>Please select your current rate:</label>\n                    <br/>\n                    <br/>\n                    {rateInState ? null : <span style={{color: \"red\", fontSize: \"12px\"}}>Required input* </span>}\n                    <br/>\n                    <br/>\n                    <SelectRate rateSetter={rateSetter} rateInState={updateRateInState} />\n                <label>How many miles (per thousand) will you be driving per year?</label>\n                    <br/>\n                    <br/>\n                    {mileRangeInState ? null : <span style={{color: \"red\", fontSize: \"12px\"}}>Required input* </span>}\n                    <br/>\n                    <br/>\n                    <SelectMileRange mileSetter={mileSetter} updateMileRangeInState={updateMileRangeInState} /> \n                <label>What hours do you plan on charging your EV?</label>\n                    <br/>\n                    <br/>\n                    {hoursInState? null : <span style={{color: \"red\", fontSize: \"12px\"}}>Required input* </span>}\n                    <br/>\n                    <br/>\n                    <SelectHours hourSetter={hourSetter} updateHoursInState={updateHoursInState}/>\n                    <br/>\n                <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={disableButton()}>Submit</Button>\n            </form>\n        </FormWrapper>\n        </>\n    )\n}","import styled from 'styled-components'\n\nconst LoadPageWrapper = styled.div`\n    padding-top: 3%;\n    margin: auto;\n    width: 35vw;\n    display: row;\n    padding-right: 3%;\n`\n\nconst RateWrapper = styled.div`\n    border: solid 1px gray;\n    border-radius: 25px;\n    text-align: center;\n    min-height: 22vh;\n    min-width: 40vw;\n    margin-top: 2%;\n    margin-bottom: 2%;\n    overflow-wrap: break-word;\n`\n\nexport default function LoadPage(props){\n\n    let rateA = props.userRateA().toFixed(2) \n    let annualRateA = rateA * 365\n    let rateB = props.touRate().toFixed(2)\n    let annualRateB = rateB * 365\n\n    const showOptimalRate = () => {\n        if (rateA < rateB) return 'Rate A'\n        if (rateA > rateB) return 'Rate B'\n    }\n\n    const calcOptimalRate = () => {\n        if (rateA < rateB) return rateB - rateA\n        if (rateA > rateB) return rateA - rateB\n    }\n\n    return (\n        <>\n        <LoadPageWrapper>\n            <RateWrapper>\n                <h2>Rate A</h2>\n                <h3>Your bill comes out to: <b style={{color: \"green\"}}>${rateA}</b> kWh</h3>\n                <h3>Your annual bill comes out to: <b style={{color: \"green\"}}>${annualRateA.toFixed(2)}</b></h3>\n            </RateWrapper>\n\n            <RateWrapper>\n                <h2>Rate B:</h2>\n                <h3>Your bill comes out to: <b style={{color: \"green\"}}>${rateB}</b> kWh</h3>\n                <h3>Your annual bill comes out to: <b style={{color: \"green\"}}> ${annualRateB.toFixed(2)}</b></h3>\n            </RateWrapper>\n\n            <RateWrapper>\n                <h2>Your optimal rate is: </h2>\n                <h3 style={{color: \"red\"}}>{showOptimalRate()}</h3>\n                <h3>You will save <b style={{color: \"green\"}}>${calcOptimalRate().toFixed(2)}</b> kWh</h3>\n                <h3>You will save <b style={{color: \"green\"}}>${(calcOptimalRate() * 365).toFixed(2)}</b> annually</h3>\n            </RateWrapper>\n        </LoadPageWrapper>\n        </>\n    )\n};\n","import {useState} from \"react\"\nimport Form from \"./Components/Form\"\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\nimport AppBar from 'material-ui/AppBar'\nimport LoadPage from \"./Components/LoadPage\"\nimport styled from 'styled-components'\n\nconst AppWrapper = styled.div`\n  overflow-x: hidden;\n`\n\nexport default function App() {\n  const [formData, setFormData] = useState({\n    rate: null,\n    mileRange: null,\n    hours: [\"0:00\", \"0:00\"]\n  })\n  // const [rateAForComparison, setRateAForComparison] = useState(null) /* this will set rate A in comparison so we can compare in Load Page vs. TOU */\n  // const [touRateForComparison, setTOURateForComparison] = useState(null) /* this will set the TOU rate from touRate() */\n  const [formSubmitted, setFormSubmitted] = useState(false) \n  const rateA = 0.15\n\n/* establish TOU rate */\n  const touRate = () => {\n    let startTime = parseInt((formData[\"hours\"][0]).split(\":\")[0]) /* sets the user's start time as an integer */\n    let endTime = parseInt((formData[\"hours\"][1]).split(\":\")[0]) /* likewise but the end time */\n    let hours = endTime - startTime /* difference between hours */\n    let total\n    let surgeStart = 12 \n    let surgeEnd = 18\n\n    /* WITHIN SURGE\n    hours within the window - startTime >= surgeStart && < surgeEnd\n    endTime > surgeEnd? if true, subtract startTime - surgeEnd == hours within\n    if endTime < surgeEnd, subtract endTime - startTime \n    surgeHours - nonSurgeHours\n    */\n    if (startTime >= surgeStart && startTime < surgeEnd){\n      let nonSurgeTotal = 0\n      if (endTime > surgeEnd){\n        let greaterThanHours = endTime - surgeEnd \n        nonSurgeTotal += greaterThanHours * 0.08\n      }\n      let surgeHours = endTime - startTime\n      let surgeTotal = surgeHours * 0.2\n      total = nonSurgeTotal + surgeTotal\n      return total\n    }\n    total = hours * 0.08\n    return total\n  }\n\n  const userRateA = () => {\n    let startTime = parseInt((formData[\"hours\"][0]).split(\":\")[0])\n    let endTime = parseInt((formData[\"hours\"][1]).split(\":\")[0])\n    let totalTime = (endTime - startTime) * rateA\n    return totalTime\n  }\n\n  const updateFormSubmittedInState = () => {\n    setFormSubmitted(true)\n  }\n\n  const updateFormData = (rate, mileRange, hours) => {\n    setFormData({...formData, rate, mileRange, hours})\n  }\n\n  return (\n    <>\n    <AppWrapper>\n      <MuiThemeProvider>\n        <AppBar title=\"ZappyRide Code Assessment\" showMenuIconButton={false} />\n          {formSubmitted ? \n            <LoadPage touRate={touRate} userRateA={userRateA} /* rateAData={rateAForComparison} touRateData={touRateForComparison} */ /> \n            : \n            <Form updateFormSubmittedInState={updateFormSubmittedInState} updateFormData={updateFormData} \n          />}\n      </MuiThemeProvider>\n    </AppWrapper>\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}